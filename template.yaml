AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Sam Tutorial

Metadata:
 AWS::CloudFormation::Interface:
  ParameterGroups:
   - Label: {default: 'Optional parameters'}
     Parameters:
      - DeploymentStage
      
Parameters:
  DeploymentStage:
    Type: String
    Description: 'Name of Deployment stage. dev, test, demo, prod'
    Default: dev
    AllowedValues:
      - dev
      - test
      - demo
      - prod

Globals:
  Function:
    MemorySize: 128
    Timeout: 10
    Runtime: python3.9
    Architectures:
      - x86_64
    Environment:
      Variables:
        sns_logs_arn: 
          Fn::GetAtt: [ EventsTemplate, Outputs.LogsSnsArn ]

Resources:

  ### Import Template
  EventsTemplate:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./events_template.yaml
      Parameters:
        DeploymentStage: !Sub ${DeploymentStage}
  ApiTemplate:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./api_template.yaml
      Parameters:
        DeploymentStage: !Sub ${DeploymentStage}
        CommonCodeLayer: !Ref CommonCodeLayer


  ### API Gateway
  SamApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${DeploymentStage}
      OpenApiVersion: 3.0.0
      BinaryMediaTypes:
        - '*~1*'
  
  # SamHttpApi:
  #   Type: AWS::Serverless::HttpApi
  #   Properties:
  #     StageName: !Sub ${DeploymentStage}
  #     DefinitionBody:
  #       'Fn::Transform':
  #         Name: AWS::Include
  #         Parameters:
  #           Location: httpapi.yaml

  
  ### Layers
  CommonCodeLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: backend/common_code
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9


  ### Functions
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/api/
      Handler: routes/users.lambda_handler
      Events:
        GetUsers:
          Type: Api
          Properties:
            Path: /users
            Method: get
            RestApiId: !Ref SamApi
        PostUser:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref SamApi
        DeleteUser:
          Type: Api
          Properties: 
            Path: /user/{userId}
            Method: delete
            RestApiId: !Ref SamApi
  
  MerchantsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/api/
      Handler: routes/merchants.lambda_handler
      Layers:
        - !Ref CommonCodeLayer
      Events:
        GetMerchants:
          Type: Api
          Properties: 
            Path: /merchants
            Method: get
            RestApiId: !Ref SamApi


  # CatFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: backend/httpapi/
  #     Handler: cat.lambda_handler
  #     Events:
  #       GetCat:
  #         Type: HttpApi
  #         Properties: 
  #           Path: /cats
  #           Method: get
  #           ApiId: !Ref SamHttpApi
  #     Policies: 
  #       - AmazonSNSFullAccess
  


Outputs:
  UsersFunction:
    Description: "Users API Function"
    Value: !GetAtt UsersFunction.Arn
  # CatFunctionArn:
  #   Description: "Cat Function Arn"
  #   Value: !GetAtt CatFunction.Arn